/**
 * @license
 * abbozza!
 *
 * Copyright 2015 Michael Brinkmeier ( michael.brinkmeier@uni-osnabrueck.de )
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview This file defines the code generated by the blocks.
 * 
 * Each code template is given in the follwoing form
 * 
 * Abbozza.Code[type] = [ <template> , [ <arg1>, <arg2>, ...] ]
 *  
 * @author michael.brinkmeier@uni-osnabrueck.de (Michael Brinkmeier)
 */


/**
 * Code snippets for blocks
 */

AbbozzaCode = [];

/**
 * Conditionals
 */
AbbozzaCode['cond_if'] = [ 'if (#) {\n#\n}', [ "V_CONDITION" , "S_STATEMENTS"] ];
AbbozzaCode['cond_if_else'] = [ 'if (#) {\n#\n} else {\n#\n}', [ "V_CONDITION" , "S_STATEMENTS1" , "S_STATEMENTS2" ] ];


/**
 * Loops
 */
AbbozzaCode['loop_endless'] = ["while (true) {\n#\n}",["S_STATEMENTS"]];
AbbozzaCode['loop_while'] = ["while (#) {\n#\n}",["V_CONDITION","S_STATEMENTS"]];
AbbozzaCode['loop_fixed'] = ["for (# __counter=0;__counter<#;__counter++) {\n#\n}",["K_NUMBER","V_COUNT","S_STATEMENTS"]];
AbbozzaCode['loop_count'] = ["for (#=#;#<#;#=#+(#)) {\n#\n}",["F_VAR","V_FROM","F_VAR","V_TO","F_VAR","F_VAR","V_STEP","S_STATEMENTS"]];
AbbozzaCode['loop_delay'] = ["wait_ms(#);",["V_TIME"]];
AbbozzaCode['loop_delay_micros'] = ["wait_us(#);",["V_TIME"]];
AbbozzaCode['loop_delay_seconds'] = ["wait(#);",["V_TIME"]];
AbbozzaCode['loop_break'] = ["break;",[]];

AbbozzaCode['loop_count_dir'] = ["for(#=#;###;#=#+(#)) {\n#\n}",["F_VAR","V_FROM","F_VAR",
                function(generator) {
                    var dir = generator.fieldToCode(this, "DIR");
                    var rel = "<=";
                    if ( dir == "DESC" ) {
                        rel = ">=";
                    }
                    return rel;
                }
                ,"V_TO","F_VAR","F_VAR",
                function(generator) {
                    var dir = generator.fieldToCode(this, "DIR");
                    var step = "1";
                    if ( dir == "DESC" ) {
                        step = "-1";
                    }
                    return step;
                },
                "S_STATEMENTS"
]];

AbbozzaCode['loop_count_dir_step'] = ["for(#=#;###;#=#+(#)) {\n#\n}",["F_VAR","V_FROM","F_VAR",
                function(generator) {
                    var dir = generator.fieldToCode(this, "DIR");
                    var rel = "<=";
                    if ( dir == "DESC" ) {
                        rel = ">=";
                    }
                    return rel;
                }
                ,"V_TO","F_VAR","F_VAR","V_STEP",
                "S_STATEMENTS"
]];

/**
 * Math
 */
AbbozzaCode['math_number'] = [ "#", ["F_VALUE"] ];
AbbozzaCode['math_decimal'] = [ "#", ["F_VALUE"] ];
AbbozzaCode['math_calc'] = [ "#", [ function(generator) {
        var left = generator.valueToCode(this,"LEFT");
  	var right = generator.valueToCode(this,"RIGHT");
  	var op = this.getFieldValue("OP");
  	if ( op == "POWER" ) {
            return "pow(" + left + "," + right +")";
  	}
  	return "(" + left + keyword(op) + right + ")";
    } ]];
AbbozzaCode['math_round'] = [ "#(#)", ["F_OP", "V_ARG"]];
AbbozzaCode['math_unary_x'] = [ "#(#)", [ "F_OP", "V_ARG" ]];
// AbbozzaCode['math_binary'] = [ "#(#,#)", [ "F_OP", "V_FIRST", "V_SECOND" ]];
AbbozzaCode['math_random'] = [ "calliope.random(#)", [ "V_MAX" ]];
// AbbozzaCode['math_random2'] = [ "random(#,#+1)", [ "V_MIN" , "V_MAX" ]];
AbbozzaCode['math_randomseed'] = [ "calliope.seedRandom(#);", [ "V_SEED" ]];
AbbozzaCode['math_millis'] = [ "calliope.systemTime()", []];

AbbozzaCode['logic_const'] = [ "#" ,[ "F_NAME" ]];
AbbozzaCode['logic_op'] = [ "(#) # (#)" ,[ "V_LEFT", "F_OP", "V_RIGHT"]];
AbbozzaCode['logic_not'] = [ "!(#)" ,[ "V_ARG" ]];
AbbozzaCode['logic_compare'] = [ "(#)#(#)" ,[ "V_LEFT", "F_OP" , 
    function(generator) {
        var vtype = generator.getTypeOfValue(this,"LEFT");
  	var right = generator.valueToCode(this,"RIGHT",vtype);
        return right;
    }]];


AbbozzaCode['text_const'] = ["#", [ function(generator) {
   return this.getText();
}] ];
AbbozzaCode['text_charat'] = ["ManagedString(#.charAt(#))",["V_TEXT","V_POS"]];
AbbozzaCode['text_concat'] = ["#+#",["V_TEXT1","V_TEXT2"]];
AbbozzaCode['text_from_number'] = ["ManagedString(#)",["V_VALUE"]];
AbbozzaCode['text_from_ascii'] = ["ManagedString(char(#))",["V_VALUE"]];
AbbozzaCode['ascii_from_text'] = ["#.charAt(0)",["V_TEXT"]];

AbbozzaCode['var_assign'] = [ "# = #;" ,["V_LEFT","V_RIGHT"]];

/*

AbbozzaCode['inout_pinmode'] = [ "pinMode(#,#);" , [ "V_PIN", "F_MODE" ]];
AbbozzaCode['inout_pin'] = [ "#" , [ "F_PIN" ]];
AbbozzaCode['inout_level'] = [ "#" , [ "F_LEVEL" ]];
AbbozzaCode['inout_digital_read'] = [ "digitalRead(#)", ["V_PIN"]];
AbbozzaCode['inout_digital_write'] = [ "digitalWrite(#,#);", ["V_PIN" , "V_LEVEL"]];
AbbozzaCode['inout_analog_read'] = [ "analogRead(#)", ["V_PIN"]];
AbbozzaCode['inout_analog_write'] = [ "analogWrite(#,#);", ["V_PIN" , "V_VALUE"]];

AbbozzaCode['serial_println'] = [ "Serial.println(#);", ["V_VALUE"], function (generator) { generator.serialRequired = true; } ];
AbbozzaCode['serial_readln'] = [ "Serial.readStringUntil('\\n')", [], function (generator) { generator.serialRequired = true; }];
AbbozzaCode['serial_available'] = [ "(Serial.available()>0)", [], function (generator) { generator.serialRequired = true; }];
// AbbozzaCode['serial_table'] = [ "#", [ Blockly.Blocks["serial_table"].generateCode_ ], function (generator) { generator.serialRequired = true; } ]


*/