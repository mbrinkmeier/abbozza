/**
 * @license
 * abbozza!
 *
 * Copyright 2015 Michael Brinkmeier ( michael.brinkmeier@uni-osnabrueck.de )
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview This file defines the code generated by the blocks.
 * 
 * Each code template is given in the follwoing form
 * 
 * Abbozza.Code[type] = [ <template> , [ <arg1>, <arg2>, ...] ]
 *  
 * @author michael.brinkmeier@uni-osnabrueck.de (Michael Brinkmeier)
 */


Blockly.Block.prototype.parametersToCode = function(generator) {
    if (!this.symbols || this.symbols == null ) return "";
    var parameters = this.symbols.getParameters(true);
    return generator.symbolsToCode(parameters,",");
}

Blockly.Block.prototype.variablesToCode = function(generator) {
    if (!this.symbols || this.symbols == null ) return "";
    var variables = this.symbols.getVariables(true);
    return generator.symbolsToCode(variables,";");
}

ReservedWords.list = ",setup,loop,if,else,for,switch,case,while,do,break,continue,return,goto," +
	"#define,#include,HIGH,LOW,INPUT,OUTPUT,INPUT_PULLUP,LED_BUILTIN,true,false," +
	"void,boolean,char,unsigned,byte,int,word,long,short,float,double,string,String," +
	"sizeof,PROGMEM,pinMode,digitalWrite,digitalRead,analogReference,analogRead," +
	"analogWrite,analogReadResolution,analogWriteResolutinon,tone,noTone,shiftOut," +
	"shiftIn,pulseIn,millis,micros,delay,delayMicroseconds,min,max,abs,constrain," +
	"map,pow,sqrt,sin,cos,tan,randomSeed,random,lowByte,highByte,bitRead,bitWrite,bitSet," +
	"bitClear,bit,attachInterrupt,detachInterrupt,interrupts,noInterrupts,Serial,Stream,"+
	"Keyboard,Mouse,"+
	"Serial.available,Serial.begin,Serial.end,Serial.find,Serial.findUntil,Serial.flush," +
	"Serial.parseFloat,Serial.parseInt,Serial.peek,Serial.print,Serail.println,Serial.read," +
	"Serial.readBytes,Serial.readBytesUntil,Serial.setTimeout,Serial.write,Serial.serialEvent," +
	"Stream.available,Stream.read,Stream.flush,Stream.find,Stream.findUnti,Stream.peek," +
	"Stream.readBytes,Stream.readBytesUntil,Stream.readString,Stream.readStringUntil,Stream.parseInt," +
	"Stream.parsefloat,Stream.setTimeout," +
	"Mouse.begin,Mouse.click,Mouse.end,Mouse.move,Mouse.press,Mouse.release,Mouse.isPressed," +
	"Keyboard.begin,Keyboard.end,Keyboard.press,Keyboard.print,Keyboard.println,Keyboard.release," +
	"Keyboard.releaseAll,Keyboard.write";



AbbozzaCode= [];

AbbozzaCode['cond_if'] = [ 'if (#) {\n#\n}', [ "V_CONDITION" , "S_STATEMENTS"] ];
AbbozzaCode['cond_if_else'] = [ 'if (#) {\n#\n} else {\n#\n}', [ "V_CONDITION" , "S_STATEMENTS1" , "S_STATEMENTS2" ] ];

AbbozzaCode['math_number'] = [ "#", ["F_VALUE"] ];
AbbozzaCode['math_calc'] = [ "#", [ function(generator) {
        var left = generator.valueToCode(this,"LEFT");
  	var right = generator.valueToCode(this,"RIGHT");
  	var op = this.getFieldValue("OP");
  	if ( op == "POWER" ) {
  		return "pow(" + left + "," + right +")";
  	}
  	return "(" + left + keyword(op) + right + ")";
    } ]];
AbbozzaCode['math_round'] = [ "#(#)", [  "F_OP", "V_ARG" ]];
AbbozzaCode['math_unary'] = [ "#(#)", [ "F_OP", "V_ARG" ]];
AbbozzaCode['math_binary'] = [ "#(#,#)", [ "F_OP", "V_FIRST", "V_SECOND" ]];
AbbozzaCode['math_random'] = [ "random(#+1)", [ "V_MAX" ]];
AbbozzaCode['math_random2'] = [ "random(#,#+1)", [ "V_MIN" , "V_MAX" ]];
AbbozzaCode['math_randomseed'] = [ "randomSeed(#);", [ "V_SEED" ]];
AbbozzaCode['math_millis'] = [ "millis()", [] ];

AbbozzaCode['inout_pinmode'] = [ "pinMode(#,#);" , [ "V_PIN", "F_MODE" ]];
AbbozzaCode['inout_pin'] = [ "#" , [ "F_PIN" ]];
AbbozzaCode['inout_level'] = [ "#" , [ "F_LEVEL" ]];
AbbozzaCode['inout_digital_read'] = [ "digitalRead(#)", ["V_PIN"]];
AbbozzaCode['inout_digital_write'] = [ "digitalWrite(#,#);", ["V_PIN" , "V_LEVEL"]];
AbbozzaCode['inout_analog_read'] = [ "analogRead(#)", ["V_PIN"]];
AbbozzaCode['inout_analog_write'] = [ "analogWrite(#,#);", ["V_PIN" , "V_VALUE"]];

AbbozzaCode['serial_println'] = [ "Serial.println(#);", ["V_VALUE"], function (generator) { generator.serialRequired = true; } ];
AbbozzaCode['serial_readln'] = [ "Serial.readStringUntil('\\n')", [], function (generator) { generator.serialRequired = true; }];
AbbozzaCode['serial_available'] = [ "(Serial.available()>0)", [], function (generator) { generator.serialRequired = true; }];
AbbozzaCode['serial_table'] = [ "#", [ Blockly.Blocks["serial_table"].generateCode_ ], function (generator) { generator.serialRequired = true; } ]
