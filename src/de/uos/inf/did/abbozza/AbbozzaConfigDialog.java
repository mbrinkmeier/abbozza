/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.uos.inf.did.abbozza;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Properties;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author michael
 */
public class AbbozzaConfigDialog extends javax.swing.JDialog {

    private AbbozzaConfig config;
    
    private DefaultTreeModel optionTree;
    private CheckBoxNode option_operations;
    private CheckBoxNode option_localVars;
    private CheckBoxNode option_serial;
    // private CheckBoxNode option_serialRate;
    private RadioButtonNode option_noArrays;
    private RadioButtonNode option_oneArray;
    private RadioButtonNode option_multiArrray;

    private int state;

    /**
     * Creates new form AbbozzaConfigDialog
     */
    public AbbozzaConfigDialog(Properties props, java.awt.Frame parent, boolean showServer, boolean modal) {
        super(parent, modal);      
        
        config = new AbbozzaConfig();
        config.set(props);

        initComponents();

        this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (screen.width - this.getWidth()) / 2;
        int y = (screen.height - this.getHeight()) / 2;
        this.setLocation(x, y);
        
        loadConfiguration();
        
        if (showServer) {
            jTabbedPane1.setSelectedComponent(jPanel1);
        }
        
        AbbozzaLogger.out(AbbozzaLocale.getLocale());
    }

    public int getState() {
        return state;
    }

    private void loadConfiguration() {
        autoStartBox.setSelected(config.startAutomatically());
        browserStartBox.setSelected(config.startBrowser());
        browserPathField.setText(config.getBrowserPath());
        serverPortSpinner.setValue(config.getServerPort());
        int i = findLocaleIndex(config.getLocale());
        localeComboBox.setSelectedIndex(i);
        updateBox.setSelected(config.getUpdate());
        updateUrlField.setText(config.getUpdateUrl());
        
        buildOptionTree();
    }

    public void setConfiguration(Properties props) {
        config = new AbbozzaConfig();
        config.set(props);
        loadConfiguration();
    }

    public Properties getConfiguration() {
        if (config == null) return null;
        return config.get();
    }
    
    private void storeConfiguration() {
        config.setAutoStart(autoStartBox.isSelected());
        config.setBrowserStart(browserStartBox.isSelected());
        config.setBrowserPath(browserPathField.getText());
        config.setServerPort(Integer.parseInt(serverPortSpinner.getValue().toString()));
        LocaleEntry le = (LocaleEntry) localeComboBox.getSelectedItem();
        AbbozzaLogger.out("storeConfiguration");
        config.setLocale(le.getLocale());
        config.setUpdate(this.updateBox.isSelected());
        config.setUpdateUrl(this.updateUrlField.getText());
        
        storeOptions();

        config.write();
    }

    public String chooseBrowser() {
        File file;
        JFileChooser chooser = new JFileChooser(Abbozza.getConfig().getBrowserPath());
        chooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                return f.canExecute();
            }

            @Override
            public String getDescription() {
                return "Select executable files";
            }
        });
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            file = chooser.getSelectedFile();
        } else {
            return null;
        }
        if (file == null) {
            return null;
        }
        return file.getAbsolutePath();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        storeButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        contentPanel = new javax.swing.JPanel();
        logoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        scrollPane = new javax.swing.JScrollPane();
        featureTree = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        autoStartBox = new javax.swing.JCheckBox();
        browserStartBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        browserPathField = new javax.swing.JTextField();
        browserButton = new javax.swing.JButton();
        serverPortSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        localeComboBox = new javax.swing.JComboBox();
        updateBox = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        updateUrlField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        storeButton.setText(AbbozzaLocale.entry("gui.save"));
        storeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(storeButton);

        cancelButton.setText(AbbozzaLocale.entry("gui.cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        contentPanel.setLayout(new java.awt.BorderLayout());

        logoPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 5, 1));
        logoPanel.setLayout(new java.awt.BorderLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/uos/inf/did/abbozza/img/abbozza200.png"))); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setVerifyInputWhenFocusTarget(false);
        logoPanel.add(jLabel1, java.awt.BorderLayout.LINE_START);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel2.setText(Abbozza.VERSION
        );
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        logoPanel.add(jLabel2, java.awt.BorderLayout.LINE_END);

        contentPanel.add(logoPanel, java.awt.BorderLayout.PAGE_START);

        featureTree.setToolTipText("");
        featureTree.setCellEditor(new FeatureCellEditor(featureTree));
        featureTree.setCellRenderer(new FeatureCellRenderer());
        featureTree.setEditable(true);
        scrollPane.setViewportView(featureTree);

        jTabbedPane1.addTab(AbbozzaLocale.entry("gui.feature_title"), scrollPane);

        autoStartBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        autoStartBox.setSelected(config.startAutomatically());
        autoStartBox.setText(AbbozzaLocale.entry("gui.start_directly"));

        browserStartBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        browserStartBox.setSelected(config.startBrowser());
        browserStartBox.setText(AbbozzaLocale.entry("gui.start_browser"));

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText(AbbozzaLocale.entry("gui.language"));
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        browserPathField.setText(config.getBrowserPath());

        browserButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/uos/inf/did/abbozza/img/directory24.png"))); // NOI18N
        browserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browserButtonActionPerformed(evt);
            }
        });

        serverPortSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        serverPortSpinner.setModel(new javax.swing.SpinnerNumberModel(config.getServerPort(), 49152, 65535, 1));

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel5.setText(AbbozzaLocale.entry("gui.server_port"));

        localeComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        localeComboBox.setModel(new DefaultComboBoxModel(Abbozza.getInstance().getLocales()));
        localeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localeComboBoxActionPerformed(evt);
            }
        });

        updateBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        updateBox.setSelected(Abbozza.getConfig().getUpdate());
        updateBox.setText(AbbozzaLocale.entry("gui.update_option"));
        updateBox.setLabel(AbbozzaLocale.entry("gui.update_option"));
        updateBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBoxActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText(AbbozzaLocale.entry("gui.update_url"));
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        updateUrlField.setText(config.getUpdateUrl());

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText(AbbozzaLocale.entry("gui.browser_path"));
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jButton1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jButton1.setText(AbbozzaLocale.entry("gui.update_button"));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(browserPathField, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(serverPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateUrlField, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(autoStartBox)
                                .addGap(18, 18, 18)
                                .addComponent(browserStartBox))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(localeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(updateBox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browserStartBox)
                    .addComponent(autoStartBox))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(browserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(browserPathField, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(updateBox)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(updateUrlField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jTabbedPane1.addTab(AbbozzaLocale.entry("gui.server_and_browser"), jPanel1);
        jPanel1.getAccessibleContext().setAccessibleDescription("");

        contentPanel.add(jTabbedPane1, java.awt.BorderLayout.LINE_START);

        getContentPane().add(contentPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        // state = 1;
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void storeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeButtonActionPerformed
        storeConfiguration();
        state = 0;
        setVisible(false);
    }//GEN-LAST:event_storeButtonActionPerformed

    private void updateBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateBoxActionPerformed

    private void localeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_localeComboBoxActionPerformed

    private void browserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browserButtonActionPerformed
        String browser = chooseBrowser();
        if (browser != null) {
            browserPathField.setText(browser);
        }
    }//GEN-LAST:event_browserButtonActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        Abbozza.getInstance().checkForUpdate(true);
    }//GEN-LAST:event_updateActionPerformed

    /**
     * @param args the command line arguments
     */
    /* public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                AbbozzaConfigDialog dialog = new AbbozzaConfigDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    */
    
    private void parseOptionNode(Node node, DefaultMutableTreeNode root) {
        String type = node.getNodeName();
        if (type.equals("group")) {
            String groupName = node.getAttributes().getNamedItem("name").getNodeValue();
            DefaultMutableTreeNode group = new DefaultMutableTreeNode(AbbozzaLocale.entry(groupName));
            NodeList children = node.getChildNodes();
            for (int i = 0; i < children.getLength(); i++) {
                parseOptionNode(children.item(i),group);
            }
            root.add(group);
        } else if (type.equals("item")) {
            String optionName  = node.getAttributes().getNamedItem("option").getNodeValue(); 
            String itemName = node.getAttributes().getNamedItem("name").getNodeValue();
            CheckBoxNode treeNode = new CheckBoxNode(config,optionName, AbbozzaLocale.entry(itemName));
            root.add(new DefaultMutableTreeNode(treeNode));
        } else if (type.equals("choice")) {
            String optionName  = node.getAttributes().getNamedItem("option").getNodeValue(); 
            String itemName = node.getAttributes().getNamedItem("name").getNodeValue();
            RadioButtonNode treeNode = new RadioButtonNode(config,optionName, AbbozzaLocale.entry(itemName));
            root.add(new DefaultMutableTreeNode(treeNode));
        }
    }
    
    
    public DefaultTreeModel buildOptionTree() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(AbbozzaLocale.entry("gui.options"));
        optionTree = new DefaultTreeModel(root);

        /**
         * ToDo: Parse the Tree in options.xml
         */
        
        // Read DOM from options.xml
        Document optionXml = Abbozza.getInstance().getOptionTree();
        NodeList roots = optionXml.getElementsByTagName("options");
        for (int i = 0; i < roots.getLength(); i++) {
            Node node = roots.item(i);
            NodeList children = node.getChildNodes();
            for (int j = 0; j < children.getLength(); j++) {
                Node child = children.item(j);
                parseOptionNode(child,root);
            }
        }

        /*
         * End of parsing
        */

        /*
        DefaultMutableTreeNode blocks = new DefaultMutableTreeNode(AbbozzaLocale.entry("gui.blocks"));
        DefaultMutableTreeNode code = new DefaultMutableTreeNode(AbbozzaLocale.entry("gui.code"));

        DefaultMutableTreeNode misc = new DefaultMutableTreeNode(AbbozzaLocale.entry("gui.misc"));

        option_operations = new CheckBoxNode(config,"operations", AbbozzaLocale.entry("gui.operations"));
        blocks.add(new DefaultMutableTreeNode(option_operations));

        option_localVars = new CheckBoxNode(config,"localVars", AbbozzaLocale.entry("gui.local_variables"));
        blocks.add(new DefaultMutableTreeNode(option_localVars));

        option_serial = new CheckBoxNode(config,"serial", AbbozzaLocale.entry("gui.serial_communication"));
        blocks.add(new DefaultMutableTreeNode(option_serial));

        // option_serialRate = new  CheckBoxNode("serialRate", "Serielle Kommunikation mit Rate");
        // blocks.add(new DefaultMutableTreeNode(option_serialRate));
        DefaultMutableTreeNode arrs = new DefaultMutableTreeNode(AbbozzaLocale.entry("gui.arrays"));

        option_noArrays = new RadioButtonNode(config,"noArrays", AbbozzaLocale.entry("gui.no_arrays"));
        option_oneArray = new RadioButtonNode(config,"linArrays", AbbozzaLocale.entry("gui.lin_arrays"));
        option_multiArrray = new RadioButtonNode(config,"multArrays", AbbozzaLocale.entry("gui.mult_arrays"));
        
        arrs.add(new DefaultMutableTreeNode(option_noArrays));
        arrs.add(new DefaultMutableTreeNode(option_oneArray));
        arrs.add(new DefaultMutableTreeNode(option_multiArrray));

        blocks.add(arrs);

        root.add(blocks);
        root.add(code);
        root.add(misc);
        */
        
        // featureTree.setCellEditor(new FeatureCellEditor(featureTree));
        featureTree.setModel(optionTree);
        for (int row = 0; row < featureTree.getRowCount(); row++ )
            featureTree.expandRow(row);

        return optionTree;
    }

    public void storeOptions() {
        // Iterate through optionTree
        // JOptionPane.showMessageDialog(null, AbbozzaLocale.entry("gui.option_info"));
        DefaultMutableTreeNode node;
        Vector<DefaultMutableTreeNode> queue = new Vector<DefaultMutableTreeNode>();
        queue.addElement((DefaultMutableTreeNode) optionTree.getRoot());
        while (!queue.isEmpty()) {
            node = queue.elementAt(0);
            queue.remove(0);
            if (node.isLeaf()) {
                if (node.getUserObject() instanceof RadioButtonNode) {
                    RadioButtonNode rbn = (RadioButtonNode) node.getUserObject();
                    rbn.storeOption(config);
                } else if (node.getUserObject() instanceof CheckBoxNode) {
                    CheckBoxNode cbn = (CheckBoxNode) node.getUserObject();
                    cbn.storeOption(config);
                }
            } else {
                Enumeration<DefaultMutableTreeNode> it = node.children();
                while (it.hasMoreElements()) {
                    DefaultMutableTreeNode child = (DefaultMutableTreeNode) it.nextElement();
                    queue.addElement(child);
                }
            }
        }
    }

    public int findLocaleIndex(String loc) {
        int len = localeComboBox.getItemCount();
        int i = 0;
        while ( (i<len) && ( !loc.equals(((LocaleEntry)localeComboBox.getItemAt(i)).getLocale())) ) {
            i++;
        }
        if (i == len) return -1;
        return i;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoStartBox;
    private javax.swing.JButton browserButton;
    private javax.swing.JTextField browserPathField;
    private javax.swing.JCheckBox browserStartBox;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JTree featureTree;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox localeComboBox;
    private javax.swing.JPanel logoPanel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSpinner serverPortSpinner;
    private javax.swing.JButton storeButton;
    private javax.swing.JCheckBox updateBox;
    private javax.swing.JTextField updateUrlField;
    // End of variables declaration//GEN-END:variables
}
